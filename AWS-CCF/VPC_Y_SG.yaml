AWSTemplateFormatVersion: "2010-09-09"
Description: Crear infraestructura de laboratorio en AWS

Parameters:
  NombreAlumno:
    Type: String
    Description: "Nombre del alumno para personalizar los recursos."
    
  DBName:
    Type: String
    Description: "Nombre de la base de datos para la instancia RDS."
  
  DBUsername:
    Type: String
    Description: "Nombre de usuario para la base de datos."
  
  DBPassword:
    Type: String
    Description: "Contraseña para la base de datos."
    NoEcho: true

  AMIId:
    Type: String
    Description: "ID de la AMI para las instancias EC2."
  
  KeyName:
    Type: String
    Description: "Nombre del par de claves SSH para las instancias EC2."

Resources:

  # Crear un par de claves SSH
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Ref KeyName
  
  # Crear la VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.225.0.0/16"
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-VPC"
  
  # Crear subredes públicas
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.225.1.0/24"
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-PublicSubnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.225.2.0/24"
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-PublicSubnet2"

  # Crear subredes privadas
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.225.3.0/24"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-PrivateSubnet1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.225.4.0/24"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-PrivateSubnet2"

  # Crear un Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-InternetGateway"

  # Asociar el Internet Gateway a la VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Crear NAT Gateway
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Crear tablas de ruteo públicas
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  AssociatePublicRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssociatePublicRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Crear tablas de ruteo privadas
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  AssociatePrivateRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  AssociatePrivateRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Grupos de Seguridad
  SGMySQL:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SG para MySQL"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          CidrIp: "10.225.0.0/16" # Solo desde la VPC

  SGProxy:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SG para Proxy"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8448
          ToPort: 8448
          CidrIp: "0.0.0.0/0"

  # Instancias EC2 en subredes públicas
  EC2InstancePublic1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref AMIId
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref SGMySQL
        - !Ref SGProxy
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-EC2Public1"

  EC2InstancePublic2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref AMIId
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref SGMySQL
        - !Ref SGProxy
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-EC2Public2"

  # Instancias EC2 en subredes privadas
  EC2InstancePrivate1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref AMIId
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref SGMySQL
        - !Ref SGProxy
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-EC2Private1"

  EC2InstancePrivate2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref AMIId
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SGMySQL
        - !Ref SGProxy
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Sub "${NombreAlumno}-EC2Private2"

  # RDS MySQL
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Grupo de subredes RDS"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref SGMySQL
      AllocatedStorage: 20
      MultiAZ: false
      BackupRetentionPeriod: 7
      PubliclyAccessible: false

Outputs:
  RDSEndpoint:
    Value: !GetAtt RDSInstance.Endpoint.Address
    Description: "Endpoint de la instancia RDS MySQL"
  
  VPCID:
    Value: !Ref VPC
    Description: "ID de la VPC"
  
  PublicSubnet1ID:
    Value: !Ref PublicSubnet1
    Description: "ID de la Subred Pública 1"

  PrivateSubnet1ID:
    Value: !Ref PrivateSubnet1
    Description: "ID de la Subred Privada 1"
